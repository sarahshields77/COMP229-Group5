{
  "version": 3,
  "sources": ["../../@material-ui/core/esm/CardHeader/CardHeader.js"],
  "sourcesContent": ["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport withStyles from '../styles/withStyles';\r\nimport Typography from '../Typography';\r\nexport var styles = {\r\n  /* Styles applied to the root element. */\r\n  root: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: 16\r\n  },\r\n\r\n  /* Styles applied to the avatar element. */\r\n  avatar: {\r\n    flex: '0 0 auto',\r\n    marginRight: 16\r\n  },\r\n\r\n  /* Styles applied to the action element. */\r\n  action: {\r\n    flex: '0 0 auto',\r\n    alignSelf: 'flex-start',\r\n    marginTop: -8,\r\n    marginRight: -8\r\n  },\r\n\r\n  /* Styles applied to the content wrapper element. */\r\n  content: {\r\n    flex: '1 1 auto'\r\n  },\r\n\r\n  /* Styles applied to the title Typography element. */\r\n  title: {},\r\n\r\n  /* Styles applied to the subheader Typography element. */\r\n  subheader: {}\r\n};\r\nvar CardHeader = /*#__PURE__*/React.forwardRef(function CardHeader(props, ref) {\r\n  var action = props.action,\r\n      avatar = props.avatar,\r\n      classes = props.classes,\r\n      className = props.className,\r\n      _props$component = props.component,\r\n      Component = _props$component === void 0 ? 'div' : _props$component,\r\n      _props$disableTypogra = props.disableTypography,\r\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\r\n      subheaderProp = props.subheader,\r\n      subheaderTypographyProps = props.subheaderTypographyProps,\r\n      titleProp = props.title,\r\n      titleTypographyProps = props.titleTypographyProps,\r\n      other = _objectWithoutProperties(props, [\"action\", \"avatar\", \"classes\", \"className\", \"component\", \"disableTypography\", \"subheader\", \"subheaderTypographyProps\", \"title\", \"titleTypographyProps\"]);\r\n\r\n  var title = titleProp;\r\n\r\n  if (title != null && title.type !== Typography && !disableTypography) {\r\n    title = /*#__PURE__*/React.createElement(Typography, _extends({\r\n      variant: avatar ? 'body2' : 'h5',\r\n      className: classes.title,\r\n      component: \"span\",\r\n      display: \"block\"\r\n    }, titleTypographyProps), title);\r\n  }\r\n\r\n  var subheader = subheaderProp;\r\n\r\n  if (subheader != null && subheader.type !== Typography && !disableTypography) {\r\n    subheader = /*#__PURE__*/React.createElement(Typography, _extends({\r\n      variant: avatar ? 'body2' : 'body1',\r\n      className: classes.subheader,\r\n      color: \"textSecondary\",\r\n      component: \"span\",\r\n      display: \"block\"\r\n    }, subheaderTypographyProps), subheader);\r\n  }\r\n\r\n  return /*#__PURE__*/React.createElement(Component, _extends({\r\n    className: clsx(classes.root, className),\r\n    ref: ref\r\n  }, other), avatar && /*#__PURE__*/React.createElement(\"div\", {\r\n    className: classes.avatar\r\n  }, avatar), /*#__PURE__*/React.createElement(\"div\", {\r\n    className: classes.content\r\n  }, title, subheader), action && /*#__PURE__*/React.createElement(\"div\", {\r\n    className: classes.action\r\n  }, action));\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? CardHeader.propTypes = {\r\n  // ----------------------------- Warning --------------------------------\r\n  // | These PropTypes are generated from the TypeScript type definitions |\r\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\r\n  // ----------------------------------------------------------------------\r\n\r\n  /**\r\n   * The action to display in the card header.\r\n   */\r\n  action: PropTypes.node,\r\n\r\n  /**\r\n   * The Avatar for the Card Header.\r\n   */\r\n  avatar: PropTypes.node,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  children: PropTypes.node,\r\n\r\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\r\n  classes: PropTypes.object,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  className: PropTypes.string,\r\n\r\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\r\n  component: PropTypes\r\n  /* @typescript-to-proptypes-ignore */\r\n  .elementType,\r\n\r\n  /**\r\n   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.\r\n   * This can be useful to render an alternative Typography variant by wrapping\r\n   * the `title` text, and optional `subheader` text\r\n   * with the Typography component.\r\n   */\r\n  disableTypography: PropTypes.bool,\r\n\r\n  /**\r\n   * The content of the component.\r\n   */\r\n  subheader: PropTypes.node,\r\n\r\n  /**\r\n   * These props will be forwarded to the subheader\r\n   * (as long as disableTypography is not `true`).\r\n   */\r\n  subheaderTypographyProps: PropTypes.object,\r\n\r\n  /**\r\n   * The content of the Card Title.\r\n   */\r\n  title: PropTypes.node,\r\n\r\n  /**\r\n   * These props will be forwarded to the title\r\n   * (as long as disableTypography is not `true`).\r\n   */\r\n  titleTypographyProps: PropTypes.object\r\n} : void 0;\r\nexport default withStyles(styles, {\r\n  name: 'MuiCardHeader'\r\n})(CardHeader);"],
  "mappings": "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",
  "names": ["CardHeader", "PropTypes"]
}
