{
  "version": 3,
  "sources": ["../../@material-ui/core/esm/GridListTile/GridListTile.js"],
  "sourcesContent": ["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\r\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport debounce from '../utils/debounce';\r\nimport withStyles from '../styles/withStyles';\r\nimport isMuiElement from '../utils/isMuiElement';\r\nexport var styles = {\r\n  /* Styles applied to the root element. */\r\n  root: {\r\n    boxSizing: 'border-box',\r\n    flexShrink: 0\r\n  },\r\n\r\n  /* Styles applied to the `div` element that wraps the children. */\r\n  tile: {\r\n    position: 'relative',\r\n    display: 'block',\r\n    // In case it's not rendered with a div.\r\n    height: '100%',\r\n    overflow: 'hidden'\r\n  },\r\n\r\n  /* Styles applied to an `img` element child, if needed to ensure it covers the tile. */\r\n  imgFullHeight: {\r\n    height: '100%',\r\n    transform: 'translateX(-50%)',\r\n    position: 'relative',\r\n    left: '50%'\r\n  },\r\n\r\n  /* Styles applied to an `img` element child, if needed to ensure it covers the tile. */\r\n  imgFullWidth: {\r\n    width: '100%',\r\n    position: 'relative',\r\n    transform: 'translateY(-50%)',\r\n    top: '50%'\r\n  }\r\n};\r\n\r\nvar fit = function fit(imgEl, classes) {\r\n  if (!imgEl || !imgEl.complete) {\r\n    return;\r\n  }\r\n\r\n  if (imgEl.width / imgEl.height > imgEl.parentElement.offsetWidth / imgEl.parentElement.offsetHeight) {\r\n    var _imgEl$classList, _imgEl$classList2;\r\n\r\n    (_imgEl$classList = imgEl.classList).remove.apply(_imgEl$classList, _toConsumableArray(classes.imgFullWidth.split(' ')));\r\n\r\n    (_imgEl$classList2 = imgEl.classList).add.apply(_imgEl$classList2, _toConsumableArray(classes.imgFullHeight.split(' ')));\r\n  } else {\r\n    var _imgEl$classList3, _imgEl$classList4;\r\n\r\n    (_imgEl$classList3 = imgEl.classList).remove.apply(_imgEl$classList3, _toConsumableArray(classes.imgFullHeight.split(' ')));\r\n\r\n    (_imgEl$classList4 = imgEl.classList).add.apply(_imgEl$classList4, _toConsumableArray(classes.imgFullWidth.split(' ')));\r\n  }\r\n};\r\n\r\nfunction ensureImageCover(imgEl, classes) {\r\n  if (!imgEl) {\r\n    return;\r\n  }\r\n\r\n  if (imgEl.complete) {\r\n    fit(imgEl, classes);\r\n  } else {\r\n    imgEl.addEventListener('load', function () {\r\n      fit(imgEl, classes);\r\n    });\r\n  }\r\n}\r\n\r\nvar warnedOnce = false;\r\n/**\r\n * ⚠️ The GridList component was renamed to ImageList to align with the current Material Design naming.\r\n *\r\n * You should use `import { ImageListItem } from '@material-ui/core'`\r\n * or `import ImageListItem from '@material-ui/core/ImageListItem'`.\r\n */\r\n\r\nvar GridListTile = /*#__PURE__*/React.forwardRef(function GridListTile(props, ref) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (!warnedOnce) {\r\n      warnedOnce = true;\r\n      console.error(['Material-UI: The GridListTile component was renamed to ImageListItem to align with the current Material Design naming.', '', \"You should use `import { ImageListItem } from '@material-ui/core'`\", \"or `import ImageListItem from '@material-ui/core/ImageListItem'`.\"].join('\\n'));\r\n    }\r\n  } // cols rows default values are for docs only\r\n\r\n\r\n  var children = props.children,\r\n      classes = props.classes,\r\n      className = props.className,\r\n      _props$cols = props.cols,\r\n      cols = _props$cols === void 0 ? 1 : _props$cols,\r\n      _props$component = props.component,\r\n      Component = _props$component === void 0 ? 'li' : _props$component,\r\n      _props$rows = props.rows,\r\n      rows = _props$rows === void 0 ? 1 : _props$rows,\r\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"cols\", \"component\", \"rows\"]);\r\n\r\n  var imgRef = React.useRef(null);\r\n  React.useEffect(function () {\r\n    ensureImageCover(imgRef.current, classes);\r\n  });\r\n  React.useEffect(function () {\r\n    var handleResize = debounce(function () {\r\n      fit(imgRef.current, classes);\r\n    });\r\n    window.addEventListener('resize', handleResize);\r\n    return function () {\r\n      handleResize.clear();\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, [classes]);\r\n  return /*#__PURE__*/React.createElement(Component, _extends({\r\n    className: clsx(classes.root, className),\r\n    ref: ref\r\n  }, other), /*#__PURE__*/React.createElement(\"div\", {\r\n    className: classes.tile\r\n  }, React.Children.map(children, function (child) {\r\n    if (! /*#__PURE__*/React.isValidElement(child)) {\r\n      return null;\r\n    }\r\n\r\n    if (child.type === 'img' || isMuiElement(child, ['Image'])) {\r\n      return /*#__PURE__*/React.cloneElement(child, {\r\n        ref: imgRef\r\n      });\r\n    }\r\n\r\n    return child;\r\n  })));\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? GridListTile.propTypes = {\r\n  /**\r\n   * Theoretically you can pass any node as children, but the main use case is to pass an img,\r\n   * in which case GridListTile takes care of making the image \"cover\" available space\r\n   * (similar to `background-size: cover` or to `object-fit: cover`).\r\n   */\r\n  children: PropTypes.node,\r\n\r\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\r\n  classes: PropTypes.object.isRequired,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  className: PropTypes.string,\r\n\r\n  /**\r\n   * Width of the tile in number of grid cells.\r\n   */\r\n  cols: PropTypes.number,\r\n\r\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\r\n  component: PropTypes\r\n  /* @typescript-to-proptypes-ignore */\r\n  .elementType,\r\n\r\n  /**\r\n   * Height of the tile in number of grid cells.\r\n   */\r\n  rows: PropTypes.number\r\n} : void 0;\r\nexport default withStyles(styles, {\r\n  name: 'MuiGridListTile'\r\n})(GridListTile);"],
  "mappings": "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",
  "names": ["fit", "GridListTile", "PropTypes"]
}
